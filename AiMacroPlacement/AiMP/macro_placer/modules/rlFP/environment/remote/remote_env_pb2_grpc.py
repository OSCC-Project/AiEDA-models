# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
# import grpc

import aifp.operation.macro_placer.rl_placer.environment.remote.remote_env_pb2 as remote__env__pb2


class RemoteEnvStub(object):
    """Interface exported by the server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.reset = channel.unary_unary(
                '/evaluate_dreamplace.RemoteEnv/reset',
                request_serializer=remote__env__pb2.Action.SerializeToString,
                response_deserializer=remote__env__pb2.Ret.FromString,
                )
        self.step = channel.unary_unary(
                '/evaluate_dreamplace.RemoteEnv/step',
                request_serializer=remote__env__pb2.Action.SerializeToString,
                response_deserializer=remote__env__pb2.Ret.FromString,
                )
        self.episode_length = channel.unary_unary(
                '/evaluate_dreamplace.RemoteEnv/episode_length',
                request_serializer=remote__env__pb2.Number.SerializeToString,
                response_deserializer=remote__env__pb2.Number.FromString,
                )
        self.macro_nums = channel.unary_unary(
                '/evaluate_dreamplace.RemoteEnv/macro_nums',
                request_serializer=remote__env__pb2.Number.SerializeToString,
                response_deserializer=remote__env__pb2.Number.FromString,
                )
        self.node_nums = channel.unary_unary(
                '/evaluate_dreamplace.RemoteEnv/node_nums',
                request_serializer=remote__env__pb2.Number.SerializeToString,
                response_deserializer=remote__env__pb2.Number.FromString,
                )
        self.edge_nums = channel.unary_unary(
                '/evaluate_dreamplace.RemoteEnv/edge_nums',
                request_serializer=remote__env__pb2.Number.SerializeToString,
                response_deserializer=remote__env__pb2.Number.FromString,
                )
        self.set_log_dir = channel.unary_unary(
                '/evaluate_dreamplace.RemoteEnv/set_log_dir',
                request_serializer=remote__env__pb2.Number.SerializeToString,
                response_deserializer=remote__env__pb2.Ret.FromString,
                )


class RemoteEnvServicer(object):
    """Interface exported by the server.
    """

    def reset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def step(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def episode_length(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def macro_nums(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def node_nums(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def edge_nums(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def set_log_dir(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RemoteEnvServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'reset': grpc.unary_unary_rpc_method_handler(
                    servicer.reset,
                    request_deserializer=remote__env__pb2.Action.FromString,
                    response_serializer=remote__env__pb2.Ret.SerializeToString,
            ),
            'step': grpc.unary_unary_rpc_method_handler(
                    servicer.step,
                    request_deserializer=remote__env__pb2.Action.FromString,
                    response_serializer=remote__env__pb2.Ret.SerializeToString,
            ),
            'episode_length': grpc.unary_unary_rpc_method_handler(
                    servicer.episode_length,
                    request_deserializer=remote__env__pb2.Number.FromString,
                    response_serializer=remote__env__pb2.Number.SerializeToString,
            ),
            'macro_nums': grpc.unary_unary_rpc_method_handler(
                    servicer.macro_nums,
                    request_deserializer=remote__env__pb2.Number.FromString,
                    response_serializer=remote__env__pb2.Number.SerializeToString,
            ),
            'node_nums': grpc.unary_unary_rpc_method_handler(
                    servicer.node_nums,
                    request_deserializer=remote__env__pb2.Number.FromString,
                    response_serializer=remote__env__pb2.Number.SerializeToString,
            ),
            'edge_nums': grpc.unary_unary_rpc_method_handler(
                    servicer.edge_nums,
                    request_deserializer=remote__env__pb2.Number.FromString,
                    response_serializer=remote__env__pb2.Number.SerializeToString,
            ),
            'set_log_dir': grpc.unary_unary_rpc_method_handler(
                    servicer.set_log_dir,
                    request_deserializer=remote__env__pb2.Number.FromString,
                    response_serializer=remote__env__pb2.Ret.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'evaluate_dreamplace.RemoteEnv', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RemoteEnv(object):
    """Interface exported by the server.
    """

    @staticmethod
    def reset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluate_dreamplace.RemoteEnv/reset',
            remote__env__pb2.Action.SerializeToString,
            remote__env__pb2.Ret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def step(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluate_dreamplace.RemoteEnv/step',
            remote__env__pb2.Action.SerializeToString,
            remote__env__pb2.Ret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def episode_length(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluate_dreamplace.RemoteEnv/episode_length',
            remote__env__pb2.Number.SerializeToString,
            remote__env__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def macro_nums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluate_dreamplace.RemoteEnv/macro_nums',
            remote__env__pb2.Number.SerializeToString,
            remote__env__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def node_nums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluate_dreamplace.RemoteEnv/node_nums',
            remote__env__pb2.Number.SerializeToString,
            remote__env__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def edge_nums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluate_dreamplace.RemoteEnv/edge_nums',
            remote__env__pb2.Number.SerializeToString,
            remote__env__pb2.Number.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def set_log_dir(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/evaluate_dreamplace.RemoteEnv/set_log_dir',
            remote__env__pb2.Number.SerializeToString,
            remote__env__pb2.Ret.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
